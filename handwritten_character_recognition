import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models


mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Preprocess the data
x_train, x_test = x_train / 255.0, x_test / 255.0

# Define the mapping from label indices to characters
label_to_char = {i: chr(i + 97) for i in range(26)}  # Map label indices to lowercase letters

# Define the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(26, activation='softmax')  # 26 classes for letters of the alphabet
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
for epoch in range(5):
    print(f'Epoch {epoch + 1}/5')
    history = model.fit(x_train.reshape(-1, 28, 28, 1), y_train, epochs=1, validation_data=(x_test.reshape(-1, 28, 28, 1), y_test))
    
    # Output accuracy after each epoch
    _, train_accuracy = model.evaluate(x_train.reshape(-1, 28, 28, 1), y_train, verbose=0)
    _, test_accuracy = model.evaluate(x_test.reshape(-1, 28, 28, 1), y_test, verbose=0)
    print(f'Training accuracy: {train_accuracy:.4f}, Test accuracy: {test_accuracy:.4f}')
    
    # Predict characters on a sample from the test set after each epoch
    sample_index = np.random.randint(0, len(x_test))
    x_sample = x_test[sample_index].reshape(1, 28, 28, 1)
    predicted_label = np.argmax(model.predict(x_sample))
    predicted_char = label_to_char[predicted_label]
    print(f'Predicted character: {predicted_char}')
