import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer

# Data Collection
data = pd.read_csv(r'C:\\Users\\DELL\\OneDrive\\Desktop\\credit dataset\\Disease_symptom_and_patient_profile_dataset.csv')

# Data Preprocessing
# Handle missing values
imputer = SimpleImputer(strategy='most_frequent')
data = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)

# Separate features and target variable
X = data.drop('Disease', axis=1)  # Features
y = data['Disease']  # Target variable

# Perform one-hot encoding for categorical variables
categorical_cols = X.select_dtypes(include=['object']).columns
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), categorical_cols)
    ],
    remainder='passthrough'
)
X_encoded = preprocessor.fit_transform(X)

# Feature scaling
scaler = StandardScaler(with_mean=False)  # Specify with_mean=False for sparse matrices
X_scaled = scaler.fit_transform(X_encoded)

# Model Selection
# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Training the Model
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluation
# Predictions
y_pred = model.predict(X_test)

# Model evaluation
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Classification report
print(classification_report(y_test, y_pred))
